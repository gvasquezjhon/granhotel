version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # Backend API
    volumes:
      - ./backend:/usr/src/app
      # For Alembic, ensure it can find alembic.ini and scripts
      # If WORKDIR in backend Dockerfile is /usr/src/app, these should be fine.
    env_file:
      - ./backend/.env
    environment:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - granhotel_network

  frontend: # New frontend service
    build:
      context: ./frontend
      dockerfile: Dockerfile # This Dockerfile is for production builds with Nginx
                           # For dev, we override the command.
      args:
        # VITE_API_BASE_URL for production build can be set here if needed,
        # but for dev, Vite uses its .env file.
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    env_file:
      - ./frontend/.env # For Vite dev server to pick up VITE_API_BASE_URL
    # Command to install dependencies (if not in volume) and run Vite dev server
    # npm install will be fast after the first time due to the named volume.
    command: sh -c "npm install && npm run dev -- --host"
    networks:
      - granhotel_network
    depends_on:
      - backend

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gran_hotel_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strong_password}
      POSTGRES_DB: ${POSTGRES_DB:-granhoteldb}
    healthcheck:
      # Use $$ to escape $ for docker-compose variable interpolation
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-gran_hotel_user} -d $${POSTGRES_DB:-granhoteldb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - granhotel_network

volumes:
  postgres_data:
  frontend_node_modules: # Define the named volume

networks:
  granhotel_network:
    driver: bridge
